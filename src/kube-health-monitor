#!/usr/bin/python

import os
import json
import time
import argparse
import subprocess

KUBECTL_GET_STACK_INFO = "kubectl get deploy %s -n %s  -o json"

KUBECTL_GET_STACK = "kubectl get pods -n %s  -o json"

NO_PODS_AVAILABLE_MESSAGE = "No Pods Available for stack %s"

NO_PODS_AVAILABLE_TITLE = "No Pods Available"

PODS_UNAVAILABLE_MESSAGE = "%s Pods Down out of %s for stack %s"

PODS_UNAVAILABLE_TITLE = "%s Pods Down"

OSASCRIPT_SEND_NOTIFICATION = """osascript -e 'display notification "{}" with title "{}"'"""

ALL_PODS_UP_TITLE = "All Pods are Up"

ALL_PODS_UP_MESSAGE = "All Pods are Up for stack %s"

KUBE_ENTITY_NAME_FILTER_TEMPLATE = "metadata.name=%s"


def send_notification(title, message):
    cmd = OSASCRIPT_SEND_NOTIFICATION.format(message, title)
    os.system(cmd)


def check_unavailable_pods(item, stack_with_pods_down):
    stack_name = extract_stack_name(item)

    if 'unavailableReplicas' in item['status']:

        if 'availableReplicas' in item['status']:

            title = PODS_UNAVAILABLE_TITLE % item['status']['unavailableReplicas']
            message = PODS_UNAVAILABLE_MESSAGE % (
            item['status']['unavailableReplicas'], item['status']['replicas'], stack_name)

        else:

            title = NO_PODS_AVAILABLE_TITLE
            message = NO_PODS_AVAILABLE_MESSAGE % stack_name

        send_notification(title, message)
        return stack_name

    else:

        if stack_name in stack_with_pods_down:
            title = ALL_PODS_UP_TITLE
            message = ALL_PODS_UP_MESSAGE % stack_name
            send_notification(title, message)

            stack_with_pods_down.remove(stack_name)

        return None


def build_kube_query(args):
    base_query = ["kubectl", "get", "deployments", "-n", args.namespace, "-o", "json"]
    stack_filter = ["--field-selector", KUBE_ENTITY_NAME_FILTER_TEMPLATE % args.stack]
    if args.stack:
        base_query.extend(stack_filter)
    return base_query


def extract_stack_name(stack_info):
    return stack_info['metadata']['name']


def load_data_set(query):
    return json.loads(subprocess.check_output(query))


def prune_data_set(data_set, exclusion_patterns):
    if exclusion_patterns is None:
        return data_set
    data_set['items'] = [item for item in data_set['items'] if
                         not is_stack_excluded(extract_stack_name(item), exclusion_patterns)]
    return data_set


def is_stack_excluded(stack_name, exclusion_patterns):
    if exclusion_patterns is None:
        return False

    if any(exclusion_pattern.lower() in stack_name.lower() for exclusion_pattern in exclusion_patterns):
        return True
    return False


def init_arg_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument("--namespace", "-n", help="specify the namespace", required=True)
    parser.add_argument("--stack", "-s", help="specify the stack name", default="")
    parser.add_argument("--frequency", "-f", help="specify the notification trigger frequency(in seconds)", default=30)
    parser.add_argument("--exclude-stacks", "-e",
                        help="specify comma separated stack names to be excluded, partial matching supported")
    return parser.parse_args()


def main():
    args = init_arg_parser()
    stack_with_pods_down = set()
    base_kube_query = build_kube_query(args)
    while True:
        output = prune_data_set(load_data_set(base_kube_query), args.exclude_stacks)
        for item in output['items']:
            stack_name = check_unavailable_pods(item, stack_with_pods_down)
            if stack_name:
                stack_with_pods_down.add(stack_name)

        time.sleep(int(args.frequency))


if __name__ == '__main__':
    main()
